{
  "version": 3,
  "sources": ["../src/modules/entities/base.ts", "../src/modules/entities/player.ts", "../src/modules/global.ts", "../src/modules/entities/enemy.ts", "../src/utils/index.ts", "../src/index.ts"],
  "sourcesContent": ["import { GlobalState } from \"../global\";\n\nexport interface MovementStrategy {\n  calculateAcceleration(): p5.Vector;\n}\n\nexport interface BaseEntity {\n  update(): void;\n  draw(): void;\n}\n\n/**\n * Represents an entity in the game (e.g. player, enemy)\n */\nexport class BaseEntity {\n  private Global = GlobalState.instance;\n  private velocity = createVector(0, 0);\n  constructor(\n    public movementStrategy: MovementStrategy,\n    public position = createVector(\n      window.innerWidth / 2,\n      window.innerHeight / 2\n    ),\n    public size = 50,\n    public inertia = 0.6,\n    public mass = 1\n  ) {}\n\n  public update() {\n    const acceleration = this.movementStrategy.calculateAcceleration();\n    this.detectCollisions(acceleration);\n    this.applyInertia(acceleration);\n    this.clampToBounds();\n    this.position.add(this.velocity);\n  }\n\n  private applyInertia(acceleration: p5.Vector) {\n    this.velocity.mult(this.inertia);\n    acceleration.mult(1 - this.inertia);\n    this.velocity.add(acceleration);\n  }\n\n  private clampToBounds() {\n    const nextPosition = p5.Vector.add(this.position, this.velocity);\n\n    if (nextPosition.x - this.size / 2 < 0) {\n      this.velocity.x = 0;\n      this.position.x = this.size / 2;\n    } else if (nextPosition.x + this.size / 2 > window.innerWidth) {\n      this.velocity.x = 0;\n      this.position.x = window.innerWidth - this.size / 2;\n    }\n\n    if (nextPosition.y - this.size / 2 < 0) {\n      this.velocity.y = 0;\n      this.position.y = this.size / 2;\n    } else if (nextPosition.y + this.size / 2 > window.innerHeight) {\n      this.velocity.y = 0;\n      this.position.y = window.innerHeight - this.size / 2;\n    }\n  }\n\n  private detectCollisions(target: p5.Vector) {\n  this.Global.entities.values().filter((e) => p5.Vector.dist(this.position, e.position) < (this.size + 5)).forEach((entity) => {\n    if (entity !== this) {\n      const distance = p5.Vector.dist(this.position, entity.position);\n      const combinedRadii = (this.size / 2) + (entity.size / 2);\n\n      if (distance < combinedRadii) {\n        // Calculate the collision normal\n        const collisionNormal = p5.Vector.sub(this.position, entity.position).normalize();\n\n        // Calculate the relative velocity\n        const relativeVelocity = p5.Vector.sub(this.velocity, entity.velocity);\n\n        // Calculate the velocity along the normal\n        const velocityAlongNormal = p5.Vector.dot(relativeVelocity, collisionNormal);\n\n        // If the objects are moving apart, do nothing\n        if (velocityAlongNormal > 0) return;\n\n        // Calculate the restitution (bounciness)\n        const restitution = 0.5; // Adjust this value to control the bounciness\n\n        // Calculate the impulse scalar\n        const impulseScalar = -(1 + restitution) * velocityAlongNormal / (1 / this.mass + 1 / entity.mass);\n\n        // Apply the impulse to the entities\n        const impulse = createVector(impulseScalar, impulseScalar);\n        p5.Vector.mult(collisionNormal, impulseScalar, impulse);\n        this.velocity.add(impulse.div(this.mass));\n        entity.velocity.sub(impulse.div(this.mass));\n      }\n    }\n  });\n}\n}\n", "import p5 from \"p5\";\nimport { GlobalState } from \"../global\";\nimport { BaseEntity, MovementStrategy } from \"./base\";\n\nexport enum CtrlMode {\n  WASD,\n  Arrow,\n}\n\nexport class Player extends BaseEntity {\n  public lives: number;\n\n  public settings: {\n    mode: CtrlMode;\n    size: number;\n  };\n\n  public kinematics: {\n    speed: number;\n    position: p5.Vector;\n  };\n\n  public constructor(\n    mode: CtrlMode = CtrlMode.WASD,\n    position = createVector(window.innerWidth / 2, window.innerHeight / 2),\n    size = 50,\n    lives: number = 3,\n    speed: number = 5\n  ) {\n    super(new PlayerMovementStrategy(speed, mode));\n\n    this.lives = lives;\n\n    this.settings = {\n      mode,\n      size,\n    };\n\n    this.kinematics = {\n      speed,\n      position,\n    };\n  }\n\n  public draw() {\n    fill(\"blue\");\n    circle(this.position.x, this.position.y, this.size);\n  }\n\n  public damage(damage: number) {\n    if (this.lives - damage < 0) return;\n    this.lives -= damage;\n  }\n\n  public heal(heal: number) {\n    if (this.lives + heal > GlobalState.settings.maxLives) return;\n    this.lives += heal;\n  }\n\n  public update() {\n    if (this.lives > 0) super.update();\n    this.draw();\n  }\n}\n\nexport class PlayerMovementStrategy implements MovementStrategy {\n  private global = GlobalState.instance;\n\n  constructor(private speed: number, private mode: CtrlMode) {}\n\n  get keys() {\n    switch (this.mode) {\n      case CtrlMode.Arrow: {\n        return {\n          LEFT: this.global.pressedKeys.has(\"ArrowLeft\"),\n          RIGHT: this.global.pressedKeys.has(\"ArrowRight\"),\n          UP: this.global.pressedKeys.has(\"ArrowUp\"),\n          DOWN: this.global.pressedKeys.has(\"ArrowDown\"),\n        };\n      }\n      case CtrlMode.WASD:\n      default: {\n        return {\n          LEFT: this.global.pressedKeys.has(\"a\"),\n          RIGHT: this.global.pressedKeys.has(\"d\"),\n          UP: this.global.pressedKeys.has(\"w\"),\n          DOWN: this.global.pressedKeys.has(\"s\"),\n        };\n      }\n    }\n  }\n\n  calculateAcceleration(): p5.Vector {\n    const acceleration = createVector(0, 0);\n\n    if (this.keys.LEFT) {\n      acceleration.x = -this.speed;\n    }\n    if (this.keys.RIGHT) {\n      acceleration.x = this.speed;\n    }\n    if (this.keys.UP) {\n      acceleration.y = -this.speed;\n    }\n    if (this.keys.DOWN) {\n      acceleration.y = this.speed;\n    }\n\n    return acceleration;\n  }\n}\n", "import { BaseEntity } from \"./entities/base\";\nimport { Enemy } from \"./entities/enemy\";\nimport { Player } from \"./entities/player\";\n\nexport class GlobalState {\n  private static _instance: GlobalState;\n\n  private constructor() {}\n\n  public static get instance() {\n    if (!GlobalState._instance) {\n      GlobalState._instance = new GlobalState();\n    }\n\n    return GlobalState._instance;\n  }\n\n  public static settings = {\n    heart: {\n      size: 50,\n      offset: 10,\n    },\n    maxLives: 5,\n    defaultLives: 3,\n  };\n\n  //! Keys\n  public pressedKeys = new Set<string>();\n\n  public addKey(key: string) {\n    this.pressedKeys.add(key);\n  }\n\n  public removeKey(key: string) {\n    this.pressedKeys.delete(key);\n  }\n\n  //! Entities\n  public entities = new Set<BaseEntity>();\n\n  public addEntity(entity: BaseEntity) {\n    this.entities.add(entity);\n  }\n\n  public removeEntity(entity: BaseEntity) {\n    this.entities.delete(entity);\n  }\n\n  public updateEntities() {    \n    this.entities.forEach((e) => e.update());\n  }\n\n  public closetEntitiesTo(target: BaseEntity) {\n    return this.entities.values().toArray().sort((a, b) => {\n      const aDistance = p5.Vector.dist(a.position, target.position);\n      const bDistance = p5.Vector.dist(b.position, target.position);\n\n      return aDistance - bDistance;\n    });\n  }\n\n  //! Player\n  public player: Player;\n\n  public createPlayer() {\n    this.player = new Player();\n\n    this.addEntity(this.player);\n\n    return this.player;\n  }\n\n  public get players() {\n    return this.entities\n      .entries()\n      .filter((e) => e instanceof Player);\n  }\n\n  //! Enemies\n  public get enemies() {\n    return this.entities.entries().filter((e) => e instanceof Enemy);\n  }\n}\n", "import p5 from \"p5\";\nimport { GlobalState } from \"../global\";\nimport { BaseEntity } from \"./base\";\n\nexport class Enemy extends BaseEntity {\n  public settings: {\n    size: number;\n  };\n\n  public kinematics: {\n    speed: number;\n    position: p5.Vector;\n  };\n\n  public constructor(\n    playerPosition: p5.Vector = GlobalState.instance.player.position,\n    position = createVector(random(0, windowWidth), random(0, windowHeight)),\n    size = 50,\n    speed = random(1, 3)\n  ) {\n    super(\n      new SeekPlayerMovementStrategy(\n        speed,\n        position,\n        playerPosition\n      ),\n      position\n    );\n\n    this.settings = {\n      size,\n    };\n\n    this.kinematics = {\n      speed,\n      position,\n    };\n  }\n\n  public draw() {\n    fill(\"red\");\n    circle(this.position.x, this.position.y, this.size);\n  }\n\n  public update() {\n    super.update();\n    this.draw();\n  }\n}\n\nexport class SeekPlayerMovementStrategy {\n  constructor(\n    private speed: number,\n    private pos: p5.Vector,\n    private playerPos: p5.Vector\n  ) {}\n\n  calculateAcceleration(): p5.Vector {\n     // Calculate the direction vector from the enemy to the player\n    const directionX = this.playerPos.x - this.pos.x;\n    const directionY = this.playerPos.y - this.pos.y;\n\n    // Calculate the distance\n    const distance = Math.sqrt(directionX * directionX + directionY * directionY);\n\n    // Normalize the direction vector\n    const normalizedDirectionX = directionX / distance;\n    const normalizedDirectionY = directionY / distance;\n\n    // Move the enemy towards the player\n    this.pos.x += normalizedDirectionX * this.speed;\n    this.pos.y += normalizedDirectionY * this.speed;\n\n    return createVector(normalizedDirectionX, normalizedDirectionY);\n  }\n}\n", "import { GlobalState } from \"../modules/global\";\n\nexport const drawHeart = (\n  x: number,\n  y: number,\n  size: number,\n  color?: string\n) => {\n  fill(color || \"red\");\n  beginShape();\n  vertex(x, y);\n  bezierVertex(x - size / 2, y - size / 2, x - size, y + size / 3, x, y + size);\n  bezierVertex(x + size, y + size / 3, x + size / 2, y - size / 2, x, y);\n  endShape(CLOSE);\n};\n\nexport const drawHearts = (\n  num: number = 3,\n  size: number = GlobalState.settings.heart.size,\n  vOffset: number = 4,\n  color?: string\n) => {\n  Array.from({ length: num }, (_, i) => i).forEach((i) => {\n    drawHeart(\n      35 + i * (size + GlobalState.settings.heart.offset),\n      10 + vOffset,\n      size,\n      color\n    );\n  });\n};\n", "import { Enemy } from \"./modules/entities/enemy\";\nimport { Player } from \"./modules/entities/player\";\nimport { GlobalState as _GlobalState } from \"./modules/global\";\nimport { drawHearts } from \"./utils\";\n\nlet spawnRate: number;\n\nlet Global: _GlobalState;\n\nlet player: Player;\nlet enemies: Enemy[] = [];\n\nfunction preload() {\n  Global = _GlobalState.instance;\n  player = Global.createPlayer();\n}\n\nfunction windowResized() {\n  resizeCanvas(windowWidth, windowHeight);\n}\n\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n\n  spawnRate = Math.round(random(5, 15));\n\n  smooth();\n  noStroke();\n}\n\nfunction keyPressed() {\n  switch (key) {\n    case \"-\": {\n      player.damage(1);\n      break;\n    }\n\n    case \"+\": {\n      player.heal(1);\n      break;\n    }\n\n    case \"1\": {\n      Global.addEntity(new Enemy());\n    }\n\n    default: {\n      break;\n    }\n  }\n\n  Global.addKey(key);\n}\n\nfunction keyReleased() {\n  Global.removeKey(key);\n}\n\nfunction draw() {\n  background(35, 80, 90);\n  Global.updateEntities();\n  drawHearts(player.lives);\n\n  // console.table(Global.closetEntitiesTo(player).map((e) => ({x: e.position.x , y: e.position.y})));\n}\n"],
  "mappings": "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",
  "names": ["CtrlMode", "key"]
}
